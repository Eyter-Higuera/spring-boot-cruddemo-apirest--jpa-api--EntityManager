package com.eyterhiguera.springboot.cruddemo.apirest.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.eyterhiguera.springboot.cruddemo.apirest.entity.Employee;

@Repository
public class EmployeeDAOJpaImpl implements EmployeeDAO {
	
	private  EntityManager entityManager;
	
	//
	@Autowired
	public EmployeeDAOJpaImpl(EntityManager theEntityManager) {
		
	   this.entityManager = theEntityManager;	
	}

	@Override
	public List<Employee> findAll() {
		
		//create a query
		TypedQuery<Employee> theQuery = entityManager.createQuery("from Employee", Employee.class);
		
		//execute query and get the result list
		 List<Employee> employees = theQuery.getResultList();
		
		//return the results
		
		return employees;
	}

	@Override
	public Employee findById(int theId) {
		
		//get the employee
		Employee theEmployee = entityManager.find(Employee.class, theId);
		
		//return the employee
		return theEmployee;
	}

	@Override
	public void save(Employee theEmployee) {
	 
		 //save or update the employee
		//if id==0 then save/insert else update
         Employee dbEmployee = entityManager.merge(theEmployee);
         
         //update with id from db.. so we can get generated id for save/insert
         //useful in our REST API to return generated id
         
/*In the case of a new employee, we'd like to get the employee id that was generated 
by the database. When we are adding a new employee initially, 
it does not have an id. that id is generated by the database. 
So for our response, we'd like to get that new id and pass it back in the response.

 When JPA does the merge, it returns a new object that has the generated id. We need to transfer that id to the employee that we will return

         Here are the players

         dbEmployee -->  the employee object returned from the database, it has the new generated employee id

         theEmployee --> the params passed in to the method from REST request. And the object we will return in REST response. If it is a "new" employee for add ... it does not have an ID set yet.*/       
         theEmployee.setId(dbEmployee.getId());
	}

	@Override
	public void deleteById(int theId) {
	
       //delete object with primary key
		Query theQuery = entityManager.createQuery("delete from Employee where id=:employeeId");
	   
		theQuery.setParameter("employeeId", theId);
		
		theQuery.executeUpdate();
	}

}
